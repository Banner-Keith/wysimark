// ../tsupconfig/tsup.config.ts
import { defineConfig } from "tsup";
var baseConfig = defineConfig({
  entry: ["./src/index.ts"],
  format: ["esm", "cjs", "iife"],
  target: ["es2020"],
  outExtension: (context) => {
    return { js: `.${context.format}.js` };
  },
  sourcemap: true,
  splitting: true,
  /**
   * The JSX files here assume that React is available as a global variable.
   * To make this work, we need to inject a shim that makes it available.
   *
   * https://github.com/egoist/tsup/issues/792
   */
  inject: ["./react-shim.js"],
  /**
   * This is relative to the importing `tsup.config.ts` file and not this file.
   */
  tsconfig: "tsconfig.tsup.json"
});
var tsup_config_default = defineConfig([
  /**
   * TypeScript types
   */
  {
    ...baseConfig,
    outDir: ".dist/types",
    dts: { only: true }
  },
  /**
   * build for Node platform
   */
  {
    ...baseConfig,
    outDir: ".dist/node",
    platform: "node"
  },
  /**
   * build for browser platform
   */
  {
    ...baseConfig,
    outDir: ".dist/browser",
    platform: "browser"
  }
]);

// tsup.config.ts
var tsup_config_default2 = tsup_config_default;
export {
  tsup_config_default2 as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vdHN1cGNvbmZpZy90c3VwLmNvbmZpZy50cyIsICJ0c3VwLmNvbmZpZy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCIvVXNlcnMvc3VubnloaXJhaS9Qcm9qZWN0cy93eXNpbWFyay93eXNpbWFyay1tb25vcmVwby9wYWNrYWdlcy90c3VwY29uZmlnL3RzdXAuY29uZmlnLnRzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIi9Vc2Vycy9zdW5ueWhpcmFpL1Byb2plY3RzL3d5c2ltYXJrL3d5c2ltYXJrLW1vbm9yZXBvL3BhY2thZ2VzL3RzdXBjb25maWdcIjtjb25zdCBfX2luamVjdGVkX2ltcG9ydF9tZXRhX3VybF9fID0gXCJmaWxlOi8vL1VzZXJzL3N1bm55aGlyYWkvUHJvamVjdHMvd3lzaW1hcmsvd3lzaW1hcmstbW9ub3JlcG8vcGFja2FnZXMvdHN1cGNvbmZpZy90c3VwLmNvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ0c3VwXCJcblxuY29uc3QgYmFzZUNvbmZpZyA9IGRlZmluZUNvbmZpZyh7XG4gIGVudHJ5OiBbXCIuL3NyYy9pbmRleC50c1wiXSxcbiAgZm9ybWF0OiBbXCJlc21cIiwgXCJjanNcIiwgXCJpaWZlXCJdLFxuICB0YXJnZXQ6IFtcImVzMjAyMFwiXSxcbiAgb3V0RXh0ZW5zaW9uOiAoY29udGV4dCkgPT4ge1xuICAgIHJldHVybiB7IGpzOiBgLiR7Y29udGV4dC5mb3JtYXR9LmpzYCB9XG4gIH0sXG4gIHNvdXJjZW1hcDogdHJ1ZSxcbiAgc3BsaXR0aW5nOiB0cnVlLFxuICAvKipcbiAgICogVGhlIEpTWCBmaWxlcyBoZXJlIGFzc3VtZSB0aGF0IFJlYWN0IGlzIGF2YWlsYWJsZSBhcyBhIGdsb2JhbCB2YXJpYWJsZS5cbiAgICogVG8gbWFrZSB0aGlzIHdvcmssIHdlIG5lZWQgdG8gaW5qZWN0IGEgc2hpbSB0aGF0IG1ha2VzIGl0IGF2YWlsYWJsZS5cbiAgICpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2Vnb2lzdC90c3VwL2lzc3Vlcy83OTJcbiAgICovXG4gIGluamVjdDogW1wiLi9yZWFjdC1zaGltLmpzXCJdLFxuICAvKipcbiAgICogVGhpcyBpcyByZWxhdGl2ZSB0byB0aGUgaW1wb3J0aW5nIGB0c3VwLmNvbmZpZy50c2AgZmlsZSBhbmQgbm90IHRoaXMgZmlsZS5cbiAgICovXG4gIHRzY29uZmlnOiBcInRzY29uZmlnLnRzdXAuanNvblwiLFxufSlcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKFtcbiAgLyoqXG4gICAqIFR5cGVTY3JpcHQgdHlwZXNcbiAgICovXG4gIHtcbiAgICAuLi5iYXNlQ29uZmlnLFxuICAgIG91dERpcjogXCIuZGlzdC90eXBlc1wiLFxuICAgIGR0czogeyBvbmx5OiB0cnVlIH0sXG4gIH0sXG4gIC8qKlxuICAgKiBidWlsZCBmb3IgTm9kZSBwbGF0Zm9ybVxuICAgKi9cbiAge1xuICAgIC4uLmJhc2VDb25maWcsXG4gICAgb3V0RGlyOiBcIi5kaXN0L25vZGVcIixcbiAgICBwbGF0Zm9ybTogXCJub2RlXCIsXG4gIH0sXG4gIC8qKlxuICAgKiBidWlsZCBmb3IgYnJvd3NlciBwbGF0Zm9ybVxuICAgKi9cbiAge1xuICAgIC4uLmJhc2VDb25maWcsXG4gICAgb3V0RGlyOiBcIi5kaXN0L2Jyb3dzZXJcIixcbiAgICBwbGF0Zm9ybTogXCJicm93c2VyXCIsXG4gIH0sXG5dKVxuIiwgImNvbnN0IF9faW5qZWN0ZWRfZmlsZW5hbWVfXyA9IFwiL1VzZXJzL3N1bm55aGlyYWkvUHJvamVjdHMvd3lzaW1hcmsvd3lzaW1hcmstbW9ub3JlcG8vcGFja2FnZXMvc3RhbmRhbG9uZS90c3VwLmNvbmZpZy50c1wiO2NvbnN0IF9faW5qZWN0ZWRfZGlybmFtZV9fID0gXCIvVXNlcnMvc3VubnloaXJhaS9Qcm9qZWN0cy93eXNpbWFyay93eXNpbWFyay1tb25vcmVwby9wYWNrYWdlcy9zdGFuZGFsb25lXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9Vc2Vycy9zdW5ueWhpcmFpL1Byb2plY3RzL3d5c2ltYXJrL3d5c2ltYXJrLW1vbm9yZXBvL3BhY2thZ2VzL3N0YW5kYWxvbmUvdHN1cC5jb25maWcudHNcIjtpbXBvcnQgY29uZmlnIGZyb20gXCIuLi90c3VwY29uZmlnL3RzdXAuY29uZmlnXCJcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnXG5cbi8vIGltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ0c3VwXCJcblxuLy8gY29uc3QgYmFzZUNvbmZpZyA9IGRlZmluZUNvbmZpZyh7XG4vLyAgIGVudHJ5OiBbXCIuL3NyYy9pbmRleC50c1wiXSxcbi8vICAgZm9ybWF0OiBbXCJlc21cIiwgXCJjanNcIiwgXCJpaWZlXCJdLFxuLy8gICB0YXJnZXQ6IFtcImVzMjAyMFwiXSxcbi8vICAgb3V0RXh0ZW5zaW9uOiAoY29udGV4dCkgPT4ge1xuLy8gICAgIHJldHVybiB7IGpzOiBgLiR7Y29udGV4dC5mb3JtYXR9LmpzYCB9XG4vLyAgIH0sXG4vLyAgIG91dERpcjogXCIuZGlzdFwiLFxuLy8gICBzb3VyY2VtYXA6IHRydWUsXG4vLyAgIHNwbGl0dGluZzogdHJ1ZSxcbi8vICAgLyoqXG4vLyAgICAqIFRoZSBKU1ggZmlsZXMgaGVyZSBhc3N1bWUgdGhhdCBSZWFjdCBpcyBhdmFpbGFibGUgYXMgYSBnbG9iYWwgdmFyaWFibGUuXG4vLyAgICAqIFRvIG1ha2UgdGhpcyB3b3JrLCB3ZSBuZWVkIHRvIGluamVjdCBhIHNoaW0gdGhhdCBtYWtlcyBpdCBhdmFpbGFibGUuXG4vLyAgICAqXG4vLyAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lZ29pc3QvdHN1cC9pc3N1ZXMvNzkyXG4vLyAgICAqL1xuLy8gICBpbmplY3Q6IFtcIi4vcmVhY3Qtc2hpbS5qc1wiXSxcbi8vICAgdHNjb25maWc6IFwidHNjb25maWcudHN1cC5qc29uXCIsXG4vLyB9KVxuXG4vLyBleHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoW1xuLy8gICB7XG4vLyAgICAgLi4uYmFzZUNvbmZpZyxcbi8vICAgICBvdXREaXI6IFwiLmRpc3Qvbm9kZVwiLFxuLy8gICAgIHBsYXRmb3JtOiBcIm5vZGVcIixcbi8vICAgICBkdHM6IHRydWUsXG4vLyAgIH0sXG4vLyAgIHtcbi8vICAgICAuLi5iYXNlQ29uZmlnLFxuLy8gICAgIG91dERpcjogXCIuZGlzdC9icm93c2VyXCIsXG4vLyAgICAgcGxhdGZvcm06IFwiYnJvd3NlclwiLFxuLy8gICB9LFxuLy8gXSlcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBeVcsU0FBUyxvQkFBb0I7QUFFdFksSUFBTSxhQUFhLGFBQWE7QUFBQSxFQUM5QixPQUFPLENBQUMsZ0JBQWdCO0FBQUEsRUFDeEIsUUFBUSxDQUFDLE9BQU8sT0FBTyxNQUFNO0FBQUEsRUFDN0IsUUFBUSxDQUFDLFFBQVE7QUFBQSxFQUNqQixjQUFjLENBQUMsWUFBWTtBQUN6QixXQUFPLEVBQUUsSUFBSSxJQUFJLFFBQVEsWUFBWTtBQUFBLEVBQ3ZDO0FBQUEsRUFDQSxXQUFXO0FBQUEsRUFDWCxXQUFXO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPWCxRQUFRLENBQUMsaUJBQWlCO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJMUIsVUFBVTtBQUNaLENBQUM7QUFFRCxJQUFPLHNCQUFRLGFBQWE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUkxQjtBQUFBLElBQ0UsR0FBRztBQUFBLElBQ0gsUUFBUTtBQUFBLElBQ1IsS0FBSyxFQUFFLE1BQU0sS0FBSztBQUFBLEVBQ3BCO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFJQTtBQUFBLElBQ0UsR0FBRztBQUFBLElBQ0gsUUFBUTtBQUFBLElBQ1IsVUFBVTtBQUFBLEVBQ1o7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUlBO0FBQUEsSUFDRSxHQUFHO0FBQUEsSUFDSCxRQUFRO0FBQUEsSUFDUixVQUFVO0FBQUEsRUFDWjtBQUNGLENBQUM7OztBQy9DRCxJQUFPQSx1QkFBUTsiLAogICJuYW1lcyI6IFsidHN1cF9jb25maWdfZGVmYXVsdCJdCn0K
